[config]
model="gpt-4"
fallback_models=["gpt-3.5-turbo-16k"]
git_provider="github"
publish_output=true
publish_output_progress=true
verbosity_level=2 # 0,1,2
use_extra_bad_extensions=false
use_repo_settings_file=true
ai_timeout=180
max_description_tokens = 500
max_commits_tokens = 500
secret_provider="google_cloud_storage"
cli_mode=false

[pr_reviewer] # /review #
require_focused_review=false
require_score_review=true
require_tests_review=false
require_security_review=true
require_estimate_effort_to_review=true
num_code_suggestions=4
inline_code_comments = true
ask_and_reflect=false
automatic_review=true
extra_instructions = ""

[pr_description] # /describe #
publish_labels=true
publish_description_as_comment=false
add_original_user_description=true
keep_original_user_title=false
extra_instructions = ""
# markers
use_description_markers=false
include_generated_by_header=false

[pr_questions] # /ask #

[pr_code_suggestions] # /improve #
num_code_suggestions=4
extra_instructions = """
You are reviewing code for 'Meet snap', a Chrome extension designed to enhance the Google Meet experience. This TypeScript-based project uses Vite for development and has a strong emphasis on service workers, content scripts, and React best practices. When suggesting improvements:
Ensure suggestions align with Chrome extension best practices, especially for service workers and content scripts.
Prioritize suggestions that improve the efficiency and reliability of the extension's core functionalities.
Ensure code suggestions are compatible with the Vite ecosystem and adhere to TypeScript best practices.
Given the project's use of React, ensure suggestions are in line with modern React best practices, including hooks and functional components.
Your goal is to provide meaningful and actionable code suggestions that enhance the performance, security, and user experience of 'Meet snap'. Forgot about logging."
"""
rank_suggestions = false
# params for '/improve --extended' mode
num_code_suggestions_per_chunk=8
rank_extended_suggestions = true
max_number_of_calls = 5
final_clip_factor = 0.95

[pr_update_changelog] # /update_changelog #
push_changelog_changes=true
extra_instructions = ""

[pr_config] # /config #

[github]
# The type of deployment to create. Valid values are 'app' or 'user'.
deployment_type = "app"
ratelimit_retries = 5

[github_action]
# Commands to execute
pr_commands = [
    "/describe",
    "/auto_review",
    "/improve --extended"
]

[github_app]
# these toggles allows running the github app from custom deployments
bot_user = "github-actions[bot]"
override_deployment_type = true
# in some deployments it's possible to get duplicate requests if the handling is long,
# these settings are used to avoid handling duplicate requests.
duplicate_requests_cache = false
duplicate_requests_cache_ttl = 60  # in seconds
# settings for "pull_request" event
handle_pr_actions = ['opened', 'reopened', 'ready_for_review', 'review_requested']
pr_commands = [    
    "/describe",
    "/auto_review",
    "/improve --extended"
]

[]

[gitlab]
# URL to the gitlab service
url = "https://gitlab.com"

# Polling (either project id or namespace/project_name) syntax can be used
projects_to_monitor = ['org_name/repo_name']

# Polling trigger
magic_word = "AutoReview"

# Polling interval
polling_interval_seconds = 30

[local]
# LocalGitProvider settings - uncomment to use paths other than default
# description_path= "path/to/description.md"
# review_path= "path/to/review.md"

[gerrit]
# endpoint to the gerrit service
# url = "ssh://gerrit.example.com:29418"
# user for gerrit authentication
# user = "ai-reviewer"
# patch server where patches will be saved
# patch_server_endpoint = "http://127.0.0.1:5000/patch"
# token to authenticate in the patch server
# patch_server_token = ""

[litellm]
#use_client = false

[pr_similar_issue]
skip_comments = false
force_update_dataset = false
max_issues_to_scan = 500

[pinecone]
# fill and place in .secrets.toml
#api_key = ...
# environment = "gcp-starter"