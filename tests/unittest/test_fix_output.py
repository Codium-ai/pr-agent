# Generated by CodiumAI

from pr_agent.algo.utils import try_fix_json
from unittest.mock import patch
from pr_agent.algo.utils import show_relevant_configurations
from pr_agent.algo.utils import convert_to_markdown_v2
from pr_agent.algo.utils import emphasize_header
from unittest.mock import patch
from pr_agent.algo.utils import validate_rate_limit_github


class TestTryFixJson:
    # Tests that JSON with complete 'Code suggestions' section returns expected output
    def test_incomplete_code_suggestions(self):
        review = '{"PR Analysis": {"Main theme": "xxx", "Type of PR": "Bug fix"}, "PR Feedback": {"General PR suggestions": "..., `xxx`...", "Code suggestions": [{"relevant file": "xxx.py", "suggestion content": "xxx [important]"}, {"suggestion number": 2, "relevant file": "yyy.py", "suggestion content": "yyy [incomp...'  # noqa: E501
        expected_output = {
            'PR Analysis': {
                'Main theme': 'xxx',
                'Type of PR': 'Bug fix'
            },
            'PR Feedback': {
                'General PR suggestions': '..., `xxx`...',
                'Code suggestions': [
                    {
                        'relevant file': 'xxx.py',
                        'suggestion content': 'xxx [important]'
                    }
                ]
            }
        }
        assert try_fix_json(review) == expected_output

    def test_incomplete_code_suggestions_new_line(self):
        review = '{"PR Analysis": {"Main theme": "xxx", "Type of PR": "Bug fix"}, "PR Feedback": {"General PR suggestions": "..., `xxx`...", "Code suggestions": [{"relevant file": "xxx.py", "suggestion content": "xxx [important]"} \n\t, {"suggestion number": 2, "relevant file": "yyy.py", "suggestion content": "yyy [incomp...'  # noqa: E501
        expected_output = {
            'PR Analysis': {
                'Main theme': 'xxx',
                'Type of PR': 'Bug fix'
            },
            'PR Feedback': {
                'General PR suggestions': '..., `xxx`...',
                'Code suggestions': [
                    {
                        'relevant file': 'xxx.py',
                        'suggestion content': 'xxx [important]'
                    }
                ]
            }
        }
        assert try_fix_json(review) == expected_output

    def test_incomplete_code_suggestions_many_close_brackets(self):
        review = '{"PR Analysis": {"Main theme": "xxx", "Type of PR": "Bug fix"}, "PR Feedback": {"General PR suggestions": "..., `xxx`...", "Code suggestions": [{"relevant file": "xxx.py", "suggestion content": "xxx [important]"} \n, {"suggestion number": 2, "relevant file": "yyy.py", "suggestion content": "yyy }, [}\n ,incomp.}  ,..'  # noqa: E501
        expected_output = {
            'PR Analysis': {
                'Main theme': 'xxx',
                'Type of PR': 'Bug fix'
            },
            'PR Feedback': {
                'General PR suggestions': '..., `xxx`...',
                'Code suggestions': [
                    {
                        'relevant file': 'xxx.py',
                        'suggestion content': 'xxx [important]'
                    }
                ]
            }
        }
        assert try_fix_json(review) == expected_output

    def test_incomplete_code_suggestions_relevant_file(self):
        review = '{"PR Analysis": {"Main theme": "xxx", "Type of PR": "Bug fix"}, "PR Feedback": {"General PR suggestions": "..., `xxx`...", "Code suggestions": [{"relevant file": "xxx.py", "suggestion content": "xxx [important]"}, {"suggestion number": 2, "relevant file": "yyy.p'  # noqa: E501
        expected_output = {
            'PR Analysis': {
                'Main theme': 'xxx',
                'Type of PR': 'Bug fix'
            },
            'PR Feedback': {
                'General PR suggestions': '..., `xxx`...',
                'Code suggestions': [
                    {
                        'relevant file': 'xxx.py',
                        'suggestion content': 'xxx [important]'
                    }
                ]
            }
        }
        assert try_fix_json(review) == expected_output

    def test_show_relevant_configurations(self):
        with patch('pr_agent.algo.utils.get_settings') as mock_settings:
            mock_settings.return_value.config = {
                'key1': 'value1',
                'key2': 'value2',
                'app_id': 'should_be_skipped'
            }
            mock_settings.return_value.get.return_value = {
                'section_key1': 'section_value1',
                'section_key2': 'section_value2'
            }
            result = show_relevant_configurations('test_section')
            assert 'key1: value1' in result
            assert 'key2: value2' in result
            assert 'app_id' not in result
            assert 'section_key1: section_value1' in result
            assert 'section_key2: section_value2' in result


    def test_convert_to_markdown_v2_ticket_compliance_multiple(self):
        output_data = {
            'review': {
                'ticket_compliance_check': [
                    {
                        'ticket_url': 'https://jira.com/browse/TICKET-1',
                        'overall_compliance_level': 'Fully compliant',
                        'fully_compliant_requirements': 'All requirements met',
                        'not_compliant_requirements': ''
                    },
                    {
                        'ticket_url': 'https://jira.com/browse/TICKET-2',
                        'overall_compliance_level': 'Partially compliant',
                        'fully_compliant_requirements': 'Some requirements met',
                        'not_compliant_requirements': 'Missing X and Y'
                    }
                ]
            }
        }
        result = convert_to_markdown_v2(output_data)
        assert 'ðŸŽ«' in result
        assert 'TICKET-1' in result
        assert 'TICKET-2' in result
        assert 'âœ…' in result or 'ðŸ”¶' in result


    def test_emphasize_header_with_reference_link_html(self):
        text = "Test Header: Some content"
        reference_link = "https://example.com"
        result = emphasize_header(text, only_markdown=False, reference_link=reference_link)
        expected = f"<strong><a href='{reference_link}'>Test Header:</a></strong><br> Some content"
        assert result == expected


    def test_validate_rate_limit_github_exceeded(self):
        mock_rate_limit = {
            'resources': {
                'core': {'limit': 100, 'remaining': 5},
                'search': {'limit': 100, 'remaining': 3}
            }
        }
        with patch('pr_agent.algo.utils.get_rate_limit_status') as mock_status:
            mock_status.return_value = mock_rate_limit
            result = validate_rate_limit_github('fake_token', threshold=0.1)
            assert result == False

